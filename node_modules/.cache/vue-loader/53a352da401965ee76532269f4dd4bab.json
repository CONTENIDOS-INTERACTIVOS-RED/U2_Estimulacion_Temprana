{"remainingRequest":"/home/runner/work/U2_Estimulacion_Temprana/U2_Estimulacion_Temprana/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/runner/work/U2_Estimulacion_Temprana/U2_Estimulacion_Temprana/src/views/curso/Tema3.vue?vue&type=template&id=3b2bbc21&lang=pug&","dependencies":[{"path":"/home/runner/work/U2_Estimulacion_Temprana/U2_Estimulacion_Temprana/src/views/curso/Tema3.vue","mtime":1747359273051},{"path":"/home/runner/work/U2_Estimulacion_Temprana/U2_Estimulacion_Temprana/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/U2_Estimulacion_Temprana/U2_Estimulacion_Temprana/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/runner/work/U2_Estimulacion_Temprana/U2_Estimulacion_Temprana/node_modules/pug-plain-loader/index.js","mtime":499162500000},{"path":"/home/runner/work/U2_Estimulacion_Temprana/U2_Estimulacion_Temprana/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/U2_Estimulacion_Temprana/U2_Estimulacion_Temprana/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}